pragma solidity ^0.8.0;

contract k{
uint healthfactor;
uint256  constant BASE = 1e18;
uint  constant blocksPerYear = 2102400;
uint  multiplierPerBlock;
uint  baseRatePerBlock;
uint  jumpMultiplierPerBlock;
uint  kink;


constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) {
        baseRatePerBlock = baseRatePerYear / blocksPerYear;
        multiplierPerBlock = multiplierPerYear / blocksPerYear;
        jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear;
        kink = kink_;

        //emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);
    }
  function getBorrowRate(uint healthfactor) public view returns (uint) {
       

        if (healthfactor <= kink) {
            return (healthfactor * multiplierPerBlock/BASE) + baseRatePerBlock;
        } else {
            uint normalRate = (kink * multiplierPerBlock/BASE) + baseRatePerBlock;
            uint excesshealthfactor = healthfactor - kink;
            return( (excesshealthfactor * jumpMultiplierPerBlock/BASE) + normalRate)*10e18;
        }
    }

}
